using System;

namespace TicTacToeSpiel
{
	class Program
	{
		// Main Methode
		static void Main()
		{
			// Array erstellen und Felder sichtbar machen (mit Ausgansdaten)
			string[,] spielbrett = new string[3,3];
			spielbrett[0,0] = "1"; spielbrett[0,1] = "2"; spielbrett[0,2] = "3";
			spielbrett[1,0] = "4"; spielbrett[1,1] = "5"; spielbrett[1,2] = "6";
			spielbrett[2,0] = "7"; spielbrett[2,1] = "8"; spielbrett[2,2] = "9";
			
			/*
			// Spielbrett anzeigen
			SpielbrettAnzeigen(spielbrett);
			*/
			
			// Spieler, der dran ist (X oder O)
			string aktuellerSpieler = "O";
			
			// Rundenzähler
			int aktuelleRunde = 1;
			
			// Spielzug Methode rufen und laufen lassen bis Spieler "nein" auswählen
			bool nochmalSpielen = true;
			while (nochmalSpielen)
			{
				// Spielfeld initialisieren
				spielbrett[0,0] = "1"; spielbrett[0,1] = "2"; spielbrett[0,2] = "3";
				spielbrett[1,0] = "4"; spielbrett[1,1] = "5"; spielbrett[1,2] = "6";
				spielbrett[2,0] = "7"; spielbrett[2,1] = "8"; spielbrett[2,2] = "9";
				
				// Aktuellen Spieler zurücksetzen
				aktuellerSpieler = "O";
				
				// Rundenzähler zurücksetzen
				aktuelleRunde = 1;
				
				// Spielbrett anzeigen
				SpielbrettAnzeigen(spielbrett);

				string gewinner = "";
				for (int i = 0; i < 9; i++)
				{
					Console.WriteLine("Runde: " + aktuelleRunde);
					Console.WriteLine("Spieler am Zug: " + aktuellerSpieler);
					aktuellerSpieler = Spielzug(spielbrett, aktuellerSpieler);
					aktuelleRunde++;
					gewinner = GewinnerCheck(spielbrett);
					if(!string.IsNullOrEmpty(gewinner))
					{
						Console.WriteLine($"Gewonnen hat Spieler {gewinner} nach {aktuelleRunde - 1} Runden. Herzlichen Glückwunsch!");
						break;
					}
				}
				if (string.IsNullOrEmpty(gewinner))
				{
					Console.WriteLine("Unentschieden");
				}
				// Nochmal Spielen Abfrage mit Input Validation
				while (true) 
				{
					Console.WriteLine("Möchten Sie nochmal spielen? (j/n)");
					string nochmalSpielenEingabe = Console.ReadLine();
					if (nochmalSpielenEingabe.ToLower() == "j")
					{
						nochmalSpielen = true;
						break;
					}
					else if (nochmalSpielenEingabe.ToLower() == "n")
					{
						nochmalSpielen = false;
						Console.WriteLine("Danke für's Spielen. Bis zum nächsten Mal.");
						break;
					}
					else
					{
						Console.WriteLine("Ungültige Eingabe. Bitte geben Sie nur 'j' oder 'n' ein.");
					}
				}
			}
		}
		
		// Prüfen ob jemand gewonnen hat
		static string GewinnerCheck(string[,] spielbrett)
		{
			//Oben prüfen (Reihe)
			string obenLinks = spielbrett[0,0];
			string obenMitte = spielbrett[0,1];
			string obenRechts = spielbrett[0,2]; 
			
			if (obenLinks == obenMitte && obenMitte == obenRechts && obenLinks != "1" && obenMitte != "2" && obenRechts != "3")
			{
				return obenLinks;
			}
			
			//Mitte prüfen (Reihe)
			string mitteLinks = spielbrett[1,0];
			string mitteMitteReihe = spielbrett[1,1];
			string mitteRechts = spielbrett[1,2];
			
			if (mitteLinks == mitteMitteReihe && mitteMitteReihe == mitteRechts && mitteLinks != "4" && mitteMitteReihe != "5" && mitteRechts != "6")
			{
				return mitteLinks;
			}
			
			//Unten prüfen (Reihe)
			string untenLinks = spielbrett[2,0];
			string untenMitte = spielbrett[2,1];
			string untenRechts = spielbrett[2,2]; 
			
			if (untenLinks == untenMitte && untenMitte == untenRechts && untenLinks != "7" && untenMitte != "8" && untenRechts != "9")
			{
				return untenLinks;
			}
			
			//Links prüfen (Spalte)
			string linksOben = spielbrett[0,0];
			string linksMitte = spielbrett[1,0];
			string linksUnten = spielbrett[2,0];
			
			if(linksOben == linksMitte && linksMitte == linksUnten && linksOben != "1" && linksMitte != "4" && linksUnten != "7")
			{
				return linksOben;
			}
			
			//Mitte prüfen (Spalte)
			string mitteOben = spielbrett[0,1];
			string mitteMitteSpalte = spielbrett[1,1];
			string mitteUnten = spielbrett[2,1];
			
			if(mitteOben == mitteMitteSpalte && mitteMitteSpalte == mitteUnten && mitteOben != "2" && mitteMitteSpalte != "5" && mitteUnten != "8")
			{
				return mitteOben;
			}
			
			//Rechts prüfen (Spalte)
			string rechtsOben = spielbrett[0,2];
			string rechtsMitte = spielbrett[1,2];
			string rechtsUnten = spielbrett[2,2];
			
			if(rechtsOben == rechtsMitte && rechtsMitte == rechtsUnten && rechtsOben != "3" && rechtsMitte != "6" && rechtsUnten != "9")
			{
				return rechtsOben;
			}
			
			//Diagonale links oben nach rechts unten prüfen
			string diagonale0_0 = spielbrett[0,0];
			string diagonale11_1 = spielbrett[1,1];
			string diagonale2_2 = spielbrett[2,2];
			
			if(diagonale0_0 == diagonale11_1 && diagonale11_1 == diagonale2_2 && diagonale0_0 != "1" && diagonale11_1 != "5" && diagonale2_2 != "9")
			{
				return  diagonale0_0;
			}
			
			//Diagonale rechts oben nach links unten prüfen
			string diagonale0_2 = spielbrett[0,2];
			string diagonale21_1 = spielbrett[1,1];
			string diagonale2_0 = spielbrett[2,0];
			if(diagonale0_2 == diagonale21_1 && diagonale21_1 == diagonale2_0 && diagonale0_2 != "3" && diagonale21_1 != "5" && diagonale2_0 != "7")
			{
				return  diagonale0_2;
			}
			return "";
		}
		
		//Spielzug Methode
		static string Spielzug(string[,] spielbrett, string aktuellerSpieler)
		{
			//Spieler nach Input fragen und Input validieren; fragen bis valider Input eingegeben wurde
			while (true)
			{
				// Input abfragen und lesen
				Console.WriteLine("Welche Position möchten Sie auswählen (1-9): ");
				string spielerEingabe = Console.ReadLine();
				
				// Input validieren
				if (int.TryParse(spielerEingabe, out int konvertierteEingabe))
				{
					// Prüfen, ob der Input in range ist
					if (konvertierteEingabe >= 1 && konvertierteEingabe <=9)
					{
						// Input zuordnen
						int neuePosition = konvertierteEingabe - 1;
						int richtigeZeile = neuePosition / 3;
						int richtigeSpalte= neuePosition % 3;
						
						// Prüfen, ob das Feld schon belegt ist
						if (spielbrett[richtigeZeile,richtigeSpalte] != "O" && spielbrett[richtigeZeile,richtigeSpalte] != "X")
						{
							// Symbol platzieren
							spielbrett[richtigeZeile,richtigeSpalte] = $"{aktuellerSpieler}";
							SpielbrettAnzeigen(spielbrett);
							Console.WriteLine("--------------------");
							break;
						}
						else
						{
							Console.WriteLine("Dieses Feld ist schon belegt. Bitte versuchen Sie es erneut.");
							continue;
						}
					}
					else
					{
						Console.WriteLine("Die Nummer, die Sie eingegeben haben liegt nicht zwischen 1 und 9. Bitte versuchen Sie es erneut.");
						continue;
					}
				}
				else
				{
					Console.WriteLine("Ihre Eingabe ist nicht korrekt. Bitte versuchen Sie es erneut.");
				}
			}
			
			// Spieler wechseln
			if (aktuellerSpieler == "O")
			{
				return "X";
			}
			else{
				return "O";
			}
		}
		
		// Spielbrett anzeigen Methode
		static void SpielbrettAnzeigen(string[,] spielbrett)
		{
			Console.WriteLine($"{spielbrett[0,0]} | {spielbrett[0,1]} | {spielbrett[0,2]}");
			Console.WriteLine("----------");
			Console.WriteLine($"{spielbrett[1,0]} | {spielbrett[1,1]} | {spielbrett[1,2]}");
			Console.WriteLine("----------");
			Console.WriteLine($"{spielbrett[2,0]} | {spielbrett[2,1]} | {spielbrett[2,2]}");
		}
		
	}
}
